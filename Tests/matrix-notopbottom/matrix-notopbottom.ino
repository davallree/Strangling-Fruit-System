/*
   FastLED Mapping Demo: https://github.com/jasoncoon/led-mapper
   Copyright (C) 2022 Jason Coon, Evil Genius Labs LLC

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <FastLED.h> // https://github.com/FastLED/FastLED

FASTLED_USING_NAMESPACE

// Based on FastLED "100-lines-of-code" demo reel, showing just a few
// of the kinds of animation patterns you can quickly and easily
// compose using FastLED.
//
// This example also shows one easy way to define multiple
// animations patterns and have them automatically rotate.
//
// -Mark Kriegsman, December 2014

#if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)
#warning "Requires FastLED 3.1 or later; check github for latest code."
#endif

// change these to match your data pin, LED type, and color order
#define DATA_PIN 5
#define LED_TYPE WS2812
#define COLOR_ORDER GBR

#define BRIGHTNESS 255

// start of data copied from LED Mapper:

#define NUM_LEDS 1000

byte coordsX[NUM_LEDS] = {};
byte coordsY[NUM_LEDS] = { 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 255, 251, 246, 242, 237, 229, 224, 220, 215, 211, 202, 198, 193, 189, 185, 176, 171, 167, 163, 158, 149, 145, 141, 136, 132, 123, 119, 114, 110, 106, 97, 92, 88, 84, 79, 70, 66, 62, 57, 53, 44, 40, 35, 31, 26, 18, 13, 9, 4, 0, 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 255, 251, 246, 242, 237, 229, 224, 220, 215, 211, 202, 198, 193, 189, 185, 176, 171, 167, 163, 158, 149, 145, 141, 136, 132, 123, 119, 114, 110, 106, 97, 92, 88, 84, 79, 70, 66, 62, 57, 53, 44, 40, 35, 31, 26, 18, 13, 9, 4, 0, 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 255, 251, 246, 242, 237, 229, 224, 220, 215, 211, 202, 198, 193, 189, 185, 176, 171, 167, 163, 158, 149, 145, 141, 136, 132, 123, 119, 114, 110, 106, 97, 92, 88, 84, 79, 70, 66, 62, 57, 53, 44, 40, 35, 31, 26, 18, 13, 9, 4, 0, 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 255, 251, 246, 242, 237, 229, 224, 220, 215, 211, 202, 198, 193, 189, 185, 176, 171, 167, 163, 158, 149, 145, 141, 136, 132, 123, 119, 114, 110, 106, 97, 92, 88, 84, 79, 70, 66, 62, 57, 53, 44, 40, 35, 31, 26, 18, 13, 9, 4, 0, 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 255, 251, 246, 242, 237, 229, 224, 220, 215, 211, 202, 198, 193, 189, 185, 176, 171, 167, 163, 158, 149, 145, 141, 136, 132, 123, 119, 114, 110, 106, 97, 92, 88, 84, 79, 70, 66, 62, 57, 53, 44, 40, 35, 31, 26, 18, 13, 9, 4, 0, 0, 4, 9, 13, 18, 26, 31, 35, 40, 44, 53, 57, 62, 66, 70, 79, 84, 88, 92, 97, 106, 110, 114, 119, 123, 132, 136, 141, 145, 149, 158, 163, 167, 171, 176, 185, 189, 193, 198, 202, 211, 215, 220, 224, 229, 237, 242, 246, 251, 255, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 };
byte angles[NUM_LEDS] = { 35, 34, 33, 33, 32, 30, 29, 28, 27, 26, 24, 23, 22, 21, 20, 17, 16, 14, 13, 12, 9, 7, 6, 4, 2, 254, 253, 251, 249, 248, 245, 243, 242, 241, 239, 237, 235, 234, 233, 232, 230, 229, 228, 227, 226, 224, 223, 222, 222, 221, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 236, 237, 239, 241, 243, 246, 248, 250, 252, 254, 3, 5, 7, 9, 11, 14, 16, 18, 19, 21, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 44, 44, 43, 42, 42, 40, 39, 38, 37, 36, 34, 33, 32, 31, 29, 26, 24, 22, 20, 18, 14, 11, 9, 6, 4, 254, 251, 249, 246, 244, 239, 237, 235, 233, 231, 227, 226, 224, 223, 222, 220, 219, 218, 217, 216, 214, 213, 213, 212, 211, 206, 206, 207, 207, 208, 209, 210, 210, 211, 212, 214, 215, 217, 218, 220, 223, 225, 227, 230, 233, 239, 242, 246, 249, 253, 6, 9, 13, 16, 20, 25, 28, 30, 32, 34, 37, 38, 40, 41, 42, 44, 45, 45, 46, 47, 48, 48, 49, 49, 50, 56, 56, 56, 55, 55, 54, 54, 54, 53, 53, 51, 51, 50, 49, 48, 46, 44, 42, 40, 38, 32, 28, 23, 17, 11, 251, 244, 238, 232, 227, 220, 217, 215, 213, 211, 208, 207, 206, 205, 204, 203, 202, 202, 201, 201, 200, 200, 200, 199, 199, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 193, 194, 194, 194, 196, 197, 199, 204, 223, 51, 56, 58, 59, 60, 61, 61, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 70, 70, 70, 71, 71, 71, 72, 72, 73, 73, 74, 75, 75, 76, 77, 79, 80, 82, 84, 86, 92, 96, 101, 107, 114, 132, 141, 148, 154, 159, 167, 169, 171, 173, 175, 177, 178, 179, 180, 180, 182, 182, 182, 183, 183, 184, 184, 184, 185, 185, 178, 178, 177, 177, 176, 175, 174, 174, 173, 172, 170, 169, 168, 166, 165, 161, 159, 157, 155, 152, 145, 142, 138, 134, 130, 121, 117, 113, 110, 106, 100, 98, 96, 94, 92, 89, 87, 86, 85, 84, 82, 81, 81, 80, 79, 78, 78, 77, 77, 76, 82, 83, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 102, 104, 106, 108, 113, 115, 118, 121, 123, 129, 132, 134, 137, 140, 145, 147, 149, 151, 153, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 170, 171, 172, 172, 167, 166, 166, 165, 164, 162, 161, 160, 159, 158, 156, 155, 153, 152, 151, 148, 146, 144, 142, 141, 137, 135, 133, 131, 129, 124, 122, 120, 118, 116, 113, 111, 109, 107, 106, 103, 102, 100, 99, 98, 96, 95, 94, 93, 92, 90, 89, 89, 88, 87, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 114, 115, 119, 120, 122, 123, 125, 128, 130, 132, 133, 135, 138, 140, 141, 143, 144, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 162, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 176, 177, 179, 180, 182, 184, 185, 187, 189, 190, 192, 194, 196, 197, 199, 201, 202, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 219, 218, 216, 215, 213, 211, 210, 208, 206, 204, 201, 199, 197, 195, 192, 190, 188, 185, 183, 181, 179, 177, 175, 173, 171, 169, 168, 166, 165, 163, 162, 161, 159, 158, 157, 156, 155, 154, 153, 146, 147, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 163, 165, 168, 170, 173, 176, 179, 183, 186, 189, 193, 197, 200, 203, 206, 209, 212, 215, 217, 219, 221, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 237, 238, 246, 246, 246, 245, 245, 244, 244, 243, 243, 242, 241, 240, 239, 238, 237, 235, 234, 232, 229, 226, 223, 219, 214, 209, 202, 195, 188, 180, 174, 168, 163, 159, 156, 153, 151, 149, 147, 146, 144, 143, 142, 141, 141, 140, 139, 139, 138, 138, 137, 137, 127, 127, 127, 127, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 125, 125, 125, 124, 124, 123, 122, 119, 114, 96, 32, 13, 8, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 11, 11, 11, 12, 12, 13, 14, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 29, 32, 35, 39, 44, 49, 55, 61, 67, 73, 79, 84, 88, 92, 96, 99, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 114, 115, 116, 116, 117, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 97, 96, 94, 92, 90, 88, 86, 83, 81, 78, 75, 72, 69, 65, 62, 59, 56, 53, 50, 47, 44, 42, 40, 37, 35, 34, 32, 30, 29, 28, 26, 25, 24, 23, 22, 21, 21, 20, 19, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 44, 46, 48, 50, 52, 54, 56, 58, 60, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 100, 95, 94, 93, 92, 91, 90, 89, 88, 87, 85, 84, 83, 82, 80, 79, 77, 76, 74, 73, 71, 70, 68, 66, 65, 63, 61, 60, 58, 56, 55, 53, 52, 50, 49, 47, 46, 45, 43, 42, 41, 40, 39, 38, 36, 35, 35, 34, 33, 32, 31 };
byte radii[NUM_LEDS] = { 255, 250, 245, 241, 236, 227, 222, 218, 214, 210, 202, 199, 195, 192, 189, 183, 180, 178, 176, 174, 171, 169, 168, 168, 167, 167, 167, 168, 168, 169, 172, 174, 176, 178, 180, 186, 189, 192, 195, 199, 206, 210, 214, 218, 222, 231, 236, 241, 245, 250, 230, 224, 219, 214, 209, 199, 194, 190, 185, 181, 172, 168, 164, 161, 157, 151, 148, 145, 143, 141, 137, 136, 135, 134, 134, 134, 135, 136, 137, 139, 143, 145, 148, 151, 154, 161, 164, 168, 172, 176, 185, 190, 194, 199, 204, 214, 219, 224, 230, 235, 218, 212, 206, 201, 195, 184, 179, 173, 168, 163, 153, 148, 143, 139, 134, 126, 122, 119, 116, 113, 108, 106, 104, 103, 102, 101, 102, 103, 104, 106, 110, 113, 116, 119, 122, 130, 134, 139, 143, 148, 158, 163, 168, 173, 179, 190, 195, 201, 206, 212, 199, 193, 186, 180, 174, 162, 156, 151, 145, 139, 128, 122, 117, 112, 107, 97, 93, 88, 84, 81, 75, 72, 71, 69, 69, 69, 71, 72, 75, 78, 84, 88, 93, 97, 102, 112, 117, 122, 128, 133, 145, 151, 156, 162, 168, 180, 186, 193, 199, 205, 196, 190, 183, 177, 171, 158, 151, 145, 139, 132, 120, 114, 108, 101, 95, 83, 78, 72, 66, 61, 51, 46, 43, 40, 37, 36, 37, 40, 43, 46, 56, 61, 66, 72, 78, 89, 95, 101, 108, 114, 126, 132, 139, 145, 151, 164, 171, 177, 183, 190, 186, 180, 173, 167, 160, 147, 141, 134, 128, 121, 108, 101, 95, 88, 82, 69, 62, 56, 49, 43, 30, 23, 17, 10, 5, 10, 17, 23, 30, 36, 49, 56, 62, 69, 75, 88, 95, 101, 108, 114, 128, 134, 141, 147, 154, 167, 173, 180, 186, 193, 195, 189, 182, 176, 169, 156, 150, 144, 137, 131, 118, 112, 106, 99, 93, 81, 75, 69, 63, 57, 46, 42, 37, 34, 31, 30, 31, 34, 37, 42, 52, 57, 63, 69, 75, 87, 93, 99, 106, 112, 125, 131, 137, 144, 150, 163, 169, 176, 182, 189, 196, 190, 184, 178, 172, 160, 154, 148, 142, 136, 125, 119, 113, 108, 103, 93, 88, 83, 79, 75, 69, 66, 64, 63, 62, 63, 64, 66, 69, 72, 79, 83, 88, 93, 98, 108, 113, 119, 125, 130, 142, 148, 154, 160, 166, 178, 184, 190, 196, 203, 215, 209, 203, 198, 192, 181, 175, 170, 164, 159, 149, 144, 139, 134, 130, 121, 117, 113, 110, 107, 101, 99, 98, 96, 95, 95, 95, 96, 98, 99, 104, 107, 110, 113, 117, 125, 130, 134, 139, 144, 154, 159, 164, 170, 175, 186, 192, 198, 203, 209, 226, 220, 215, 210, 205, 195, 190, 185, 180, 176, 167, 163, 159, 155, 151, 145, 142, 139, 137, 134, 131, 130, 129, 128, 128, 128, 129, 130, 131, 132, 137, 139, 142, 145, 148, 155, 159, 163, 167, 171, 180, 185, 190, 195, 200, 210, 215, 220, 226, 231, 251, 246, 241, 236, 231, 222, 218, 213, 209, 205, 197, 193, 190, 186, 183, 177, 174, 172, 170, 168, 164, 163, 162, 161, 161, 160, 161, 161, 162, 163, 166, 168, 170, 172, 174, 180, 183, 186, 190, 193, 201, 205, 209, 213, 218, 227, 231, 236, 241, 246, 217, 213, 208, 204, 200, 196, 192, 188, 184, 181, 177, 174, 171, 168, 166, 163, 161, 159, 158, 156, 155, 155, 154, 154, 154, 154, 155, 155, 156, 158, 159, 161, 163, 166, 168, 171, 174, 177, 181, 184, 188, 192, 196, 200, 204, 208, 213, 217, 222, 227, 202, 197, 192, 186, 181, 176, 171, 167, 162, 157, 153, 149, 145, 141, 137, 133, 130, 127, 125, 122, 120, 118, 117, 116, 115, 114, 114, 115, 116, 117, 118, 120, 122, 125, 127, 130, 133, 137, 141, 145, 149, 153, 157, 162, 167, 171, 176, 181, 186, 192, 171, 165, 159, 154, 148, 142, 137, 132, 126, 121, 116, 111, 106, 102, 98, 94, 90, 86, 83, 81, 79, 77, 76, 75, 75, 76, 77, 79, 81, 83, 86, 90, 94, 98, 102, 106, 111, 116, 121, 126, 132, 137, 142, 148, 154, 159, 165, 171, 177, 183, 171, 164, 158, 151, 145, 139, 132, 126, 120, 114, 108, 101, 95, 89, 83, 78, 72, 66, 61, 56, 51, 46, 43, 40, 37, 36, 36, 37, 40, 43, 46, 51, 56, 61, 66, 72, 78, 83, 89, 95, 101, 108, 114, 120, 126, 132, 139, 145, 151, 158, 154, 147, 141, 134, 128, 121, 114, 108, 101, 95, 88, 82, 75, 69, 62, 56, 49, 43, 36, 30, 23, 17, 10, 5, 5, 10, 17, 23, 30, 36, 43, 49, 56, 62, 69, 75, 82, 88, 95, 101, 108, 114, 121, 128, 134, 141, 147, 154, 160, 167, 172, 166, 159, 153, 147, 141, 134, 128, 122, 116, 110, 104, 98, 92, 86, 81, 75, 70, 65, 60, 56, 52, 48, 46, 44, 43, 43, 44, 46, 48, 52, 56, 60, 65, 70, 75, 81, 86, 92, 98, 104, 110, 116, 122, 128, 134, 141, 147, 153, 159, 174, 168, 163, 157, 151, 146, 141, 135, 130, 125, 120, 116, 111, 107, 103, 99, 95, 92, 89, 87, 85, 83, 82, 82, 82, 82, 83, 85, 87, 89, 92, 95, 99, 103, 107, 111, 116, 120, 125, 130, 135, 141, 146, 151, 157, 163, 168, 174, 180, 186, 206, 201, 196, 190, 185, 181, 176, 171, 167, 162, 158, 154, 150, 146, 142, 139, 136, 133, 131, 128, 126, 125, 123, 122, 121, 121, 121, 121, 122, 123, 125, 126, 128, 131, 133, 136, 139, 142, 146, 150, 154, 158, 162, 167, 171, 176, 181, 185, 190, 196, 222, 218, 213, 209, 205, 201, 197, 193, 190, 186, 183, 180, 177, 174, 172, 170, 168, 166, 164, 163, 162, 161, 161, 160, 160, 161, 161, 162, 163, 164, 166, 168, 170, 172, 174, 177, 180, 183, 186, 190, 193, 197, 201, 205, 209, 213, 218, 222, 227, 231 };

// end of data copied from LED Mapper

CRGB leds[NUM_LEDS];

#define FRAMES_PER_SECOND 60
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

uint8_t offset = 0; // rotating "base color" used by many of the patterns
uint8_t speed = 100;

boolean autoplay = true;
uint8_t autoplaySeconds = 5;

void setup()
{
  //  delay(3000); // 3 second delay for recovery

  Serial.begin(9600);

  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setCorrection(TypicalSMD5050);

  FastLED.setMaxPowerInVoltsAndMilliamps(5, 1000); // 1A

  FastLED.setBrightness(BRIGHTNESS);
}

// List of patterns to cycle through.  Each is defined as a separate function below.
typedef void (*SimplePatternList[])();
SimplePatternList patterns = {
    // 2D map examples:
    clockwisePalette,
    counterClockwisePalette,
    outwardPalette,
    inwardPalette,
    northPalette,
    northEastPalette,
    eastPalette,
    southEastPalette,
    southPalette,
    southWestPalette,
    westPalette,
    northWestPalette,

    // standard FastLED demo reel examples:
    //  rainbow,
    //  rainbowWithGlitter,
    //  confetti,
    //  sinelon,
    //  juggle,
    //  bpm
};

const uint8_t patternCount = ARRAY_SIZE(patterns);

uint8_t currentPatternIndex = 0; // Index number of which pattern is current

CRGBPalette16 IceColors_p = CRGBPalette16(CRGB::Black, CRGB::Blue, CRGB::Aqua, CRGB::White);

const CRGBPalette16 palettes[] = {
    RainbowColors_p,
    RainbowStripeColors_p,
    CloudColors_p,
    LavaColors_p,
    OceanColors_p,
    ForestColors_p,
    PartyColors_p,
    HeatColors_p,
    IceColors_p,
};

const uint8_t paletteCount = ARRAY_SIZE(palettes);

uint8_t currentPaletteIndex = 0;
CRGBPalette16 currentPalette = palettes[currentPaletteIndex];

boolean autoplayPalettes = true;
uint8_t autoplayPaletteSeconds = autoplaySeconds * patternCount;

void loop()
{
  // Call the current pattern function once, updating the 'leds' array
  patterns[currentPatternIndex]();

  offset = beat8(speed);

  // do some periodic updates
  EVERY_N_SECONDS(autoplaySeconds)
  {
    if (autoplay)
    {
      nextPattern(); // change patterns periodically
    }
  }

  EVERY_N_SECONDS(autoplayPaletteSeconds)
  {
    // change palettes periodically
    if (autoplayPalettes)
    {
      nextPalette();
    }
  }

  // send the 'leds' array out to the actual LED strip
  // FastLED.show(); called automatically, internally by FastLED.delay below:

  // insert a delay to keep the framerate modest
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void nextPattern()
{
  // add one to the current pattern number, and wrap around at the end
  currentPatternIndex = (currentPatternIndex + 1) % patternCount;
}

void nextPalette()
{
  // add one to the current palette number, and wrap around at the end
  currentPaletteIndex = (currentPaletteIndex + 1) % paletteCount;
  currentPalette = palettes[currentPaletteIndex];
}

// 2D map examples:

void clockwisePalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + angles[i]);
  }
}

void counterClockwisePalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - angles[i]);
  }
}

void outwardPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - radii[i]);
  }
}

void inwardPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + radii[i]);
  }
}

void northPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsY[i]);
  }
}

void northEastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - (coordsX[i] + coordsY[i]));
  }
}

void eastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsX[i]);
  }
}

void southEastPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset - coordsX[i] + coordsY[i]);
  }
}

void southPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsY[i]);
  }
}

void southWestPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i] + coordsY[i]);
  }
}

void westPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i]);
  }
}

void northWestPalette()
{
  for (uint16_t i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = ColorFromPalette(currentPalette, offset + coordsX[i] - coordsY[i]);
  }
}

// standard FastLED demo reel examples:

void rainbow()
{
  // FastLED's built-in rainbow generator
  fill_rainbow(leds, NUM_LEDS, offset, 7);
}

void rainbowWithGlitter()
{
  // built-in FastLED rainbow, plus some random sparkly glitter
  rainbow();
  addGlitter(80);
}

void addGlitter(fract8 chanceOfGlitter)
{
  if (random8() < chanceOfGlitter)
  {
    leds[random16(NUM_LEDS)] += CRGB::White;
  }
}

void confetti()
{
  // random colored speckles that blink in and fade smoothly
  fadeToBlackBy(leds, NUM_LEDS, 10);
  int pos = random16(NUM_LEDS);
  leds[pos] += CHSV(offset + random8(64), 200, 255);
}

void sinelon()
{
  // a colored dot sweeping back and forth, with fading trails
  fadeToBlackBy(leds, NUM_LEDS, 20);
  int pos = beatsin16(13, 0, NUM_LEDS - 1);
  leds[pos] += CHSV(offset, 255, 192);
}

void bpm()
{
  // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
  uint8_t BeatsPerMinute = 62;
  CRGBPalette16 palette = PartyColors_p;
  uint8_t beat = beatsin8(BeatsPerMinute, 64, 255);
  for (int i = 0; i < NUM_LEDS; i++)
  { // 9948
    leds[i] = ColorFromPalette(palette, offset + (i * 2), beat - offset + (i * 10));
  }
}

const byte dotCount = 3;
const byte hues = 240 / dotCount;

void juggle()
{
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy(leds, NUM_LEDS, 20);
  for (int i = 0; i < dotCount; i++)
  {
    leds[beatsin16(i + 7, 0, NUM_LEDS - 1)] |= CHSV(i * hues, 200, 255);
  }
}